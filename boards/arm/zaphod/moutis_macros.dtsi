 

    macros {

        m_findsel: m_findsel {
            label = "Find Selection";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LG(C)>
                    , <&macro_tap &kp LG(F)>
                    , <&macro_tap &kp LG(V)>
                    , <&macro_tap &kp RETURN>
                    , <&macro_tap &kp LG(G)>
                ;
        };

        m_selword: m_selword {
            label = "m_select word";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LA(LEFT)>
                    , <&macro_tap &kp LS(LA(RIGHT))>
                ;
        };

    ZMK_MACRO(typeQu,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp Q>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp U>
                ;
        )

    ZMK_MACRO(ak_g,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp G>
                , <&sl l_akL>
                ;
        )

    ZMK_MACRO(ak_m,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp M>
                , <&sl l_akHU>
                ;
        )
        
    ZMK_MACRO(ak_x,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp X>
                , <&sl l_akL>
                ;
        )

    ZMK_MACRO(ak_lg,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp BSPC>
                , <&macro_tap &kp L>
                , <&macro_tap &kp G>
                ;
        )

    ZMK_MACRO(ak_a,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp A>
                , <&sl l_akHU>
                ;
        )


    ZMK_MACRO(digraphTh,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp T>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )
    ZMK_MACRO(digraphSh,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp S>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )
    ZMK_MACRO(digraphCh,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp C>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )
    ZMK_MACRO(digraphWh,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp W>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )
    ZMK_MACRO(digraphGh,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp G>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )
    ZMK_MACRO(digraphPh,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&macro_tap &kp P>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )


        trigraphSch: trigraphSch {
            label = "trigraphSch";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp S>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp C &kp H>
                ;
        };
        trigraphTch: trigraphTch {
            label = "trigraphTch";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp T>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp C &kp H>
                ;
        };


#ifdef EN_PRONOUN_COMBOS
// Pronouns
        typePnI: pnI {
            label = "pnI";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(I)>
                    , <&macro_tap &kp SPACE>
                ;
        };
        typePnIm: pnIm {
            label = "pnIM";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(I)>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp APOS &kp M &kp SPACE>
                ;
        };
        typePnId: pnId {
            label = "pnID";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(I)>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp APOS &kp D &kp SPACE>
                ;
        };
        typePnIll: pnIll {
            label = "pnIL";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(I)>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp APOS &kp L &kp L &kp SPACE>
                ;
        };
        typePnIve: pnIve {
            label = "pnIVE";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(I)>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp APOS &kp V &kp E &kp SPACE>
                ;
        };
// YOU
        typePnYoure: pnYoure {
            label = "pnYoure";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp Y>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp O &kp U &kp APOS &kp R &kp E &kp SPACE>
                ;
        };
        typePnYoud: pnYoud {
            label = "pnYou'd";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp Y>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp O &kp U &kp APOS &kp D &kp SPACE>
                ;
        };
        typePnYoull: pnYoull {
            label = "pnYou'll";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp Y>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp O &kp U &kp APOS &kp L &kp L &kp SPACE>
                ;
        };
        typePnYouve: pnYouve {
            label = "pnYou've";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp Y>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp O &kp U &kp APOS &kp V &kp E &kp SPACE>
                ;
        };
// WE
        typePnWere: pnWere {
            label = "pnWere";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp W>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp E &kp APOS &kp R &kp E &kp SPACE>
                ;
        };
        typePnWed: pnWed {
            label = "pnWe'd";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp W>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp E &kp APOS &kp D &kp SPACE>
                ;
        };
        typePnWell: pnWell {
            label = "pnWe'll";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp W>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp E &kp APOS &kp L &kp L &kp SPACE>
                ;
        };
        typePnWeve: pnWeve {
            label = "pnWe've";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp W>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp E &kp APOS &kp V &kp E &kp SPACE>
                ;
        };

#endif // EN_PRONOUN_COMBOS

    };

