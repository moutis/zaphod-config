 

    macros {

        m_findsel: m_findsel {
            label = "Find Selection";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LG(C)>
                    , <&macro_tap &kp LG(F)>
                    , <&macro_tap &kp LG(V)>
                    , <&macro_tap &kp RETURN>
                    , <&macro_tap &kp LG(G)>
                ;
        };

        m_selword: m_selword {
            label = "m_select word";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LA(LEFT)>
                    , <&macro_tap &kp LS(LA(RIGHT))>
                ;
        };

    ZMK_MACRO(typeSemi,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_release &kp LSHFT>
                , <&macro_tap &kp SEMICOLON>
                ;
        )
    ZMK_MACRO(Qu,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp Q>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp U>
                ;
        )

    ZMK_MACRO(pairDquo,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp LA(LBKT) &kp LS(LA(LBKT)) &kp LEFT>
                ;
        )
    ZMK_MACRO(pairLtGt,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp LT &kp GT &kp LEFT>
                ;
        )
    ZMK_MACRO(pairPar,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp LPAR &kp RPAR &kp LEFT>
                ;
        )
    ZMK_MACRO(pairBrc,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp LBRC &kp RBRC &kp LEFT>
                ;
        )
    ZMK_MACRO(pairBkt,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp LBKT &kp RBKT &kp LEFT>
                ;
        )

    ZMK_MACRO(ak_g,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp G>
                , <&sl l_akG>;
        )
    ZMK_MACRO(ak_d,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp D>
                , <&sl l_akD>;
        )
    ZMK_MACRO(ak_x,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp X>
                , <&sl l_akX>;
        )
    ZMK_MACRO(ak_xp,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp P>
                , <&sl l_akX>;
        )
    ZMK_MACRO(ak_m,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp M>
                , <&sl l_akM>;
        )
    ZMK_MACRO(ak_lg,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp BSPC &kp L &kp G>;
        )
    ZMK_MACRO(ak_lm,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp BSPC &kp L &kp M>
                    , <&sl l_akM>
        ;
        )
    ZMK_MACRO(ak_lk,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp BSPC &kp L &kp K>;
        )
    ZMK_MACRO(ak_k,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp K>
                , <&sl l_akK>;
        )
    ZMK_MACRO(ak_w,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp W>
                , <&sl l_akW>;
        )
    ZMK_MACRO(ak_f,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp F>
                , <&sl l_akF>;
        )
    ZMK_MACRO(ak_sp,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp BSPC &kp L &kp P>;
        )

    ZMK_MACRO(ak_a,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp A>
                , <&sl l_akA>;
        )
    ZMK_MACRO(ak_u,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp U>
                , <&sl l_akU>;
        )
    ZMK_MACRO(ak_e,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp E &sl l_akE>;
        )
    ZMK_MACRO(ak_o,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp O &sl l_akO>;
        )


    ZMK_MACRO(Th,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp T>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )
    ZMK_MACRO(Ch,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp C>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )
    ZMK_MACRO(Wh,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp W>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )
    ZMK_MACRO(Sh,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp S>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )
    ZMK_MACRO(Gh,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp G>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )
    ZMK_MACRO(Ght,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&kp G &kp H &kp T>
                ;
        )
    ZMK_MACRO(Ph,
        wait-ms = <20>;
        tap-ms = <20>;
        bindings = <&macro_tap &kp P>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp H>
                ;
        )


        Sch: Sch {
            label = "Sch";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp S>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp C &kp H>
                ;
        };
        Tch: Tch {
            label = "Tch";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp T>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp C &kp H>
                ;
        };


#ifdef EN_PRONOUN_COMBOS
// Pronouns
        typePnI: pnI {
            label = "pnI";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(I)>
                    , <&macro_tap &kp SPACE>
                ;
        };
        typePnIm: pnIm {
            label = "pnIM";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(I)>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp APOS &kp M &kp SPACE>
                ;
        };
        typePnId: pnId {
            label = "pnID";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(I)>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp APOS &kp D &kp SPACE>
                ;
        };
        typePnIll: pnIll {
            label = "pnIL";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(I)>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp APOS &kp L &kp L &kp SPACE>
                ;
        };
        typePnIve: pnIve {
            label = "pnIVE";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp LS(I)>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp APOS &kp V &kp E &kp SPACE>
                ;
        };
// YOU
        typePnYoure: pnYoure {
            label = "pnYoure";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp Y>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp O &kp U &kp APOS &kp R &kp E &kp SPACE>
                ;
        };
        typePnYoud: pnYoud {
            label = "pnYou'd";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp Y>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp O &kp U &kp APOS &kp D &kp SPACE>
                ;
        };
        typePnYoull: pnYoull {
            label = "pnYou'll";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp Y>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp O &kp U &kp APOS &kp L &kp L &kp SPACE>
                ;
        };
        typePnYouve: pnYouve {
            label = "pnYou've";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp Y>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp O &kp U &kp APOS &kp V &kp E &kp SPACE>
                ;
        };
// WE
        typePnWere: pnWere {
            label = "pnWere";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp W>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp E &kp APOS &kp R &kp E &kp SPACE>
                ;
        };
        typePnWed: pnWed {
            label = "pnWe'd";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp W>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp E &kp APOS &kp D &kp SPACE>
                ;
        };
        typePnWell: pnWell {
            label = "pnWe'll";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp W>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp E &kp APOS &kp L &kp L &kp SPACE>
                ;
        };
        typePnWeve: pnWeve {
            label = "pnWe've";
            compatible = "zmk,behavior-macro";
            tap-ms = <10>;
            wait-ms = <10>;
            #binding-cells = <0>;
            bindings = <&macro_tap &kp W>
                    , <&macro_release &kp LSHFT>
                    , <&macro_release &kp RSHFT>
                    , <&macro_tap &kp E &kp APOS &kp V &kp E &kp SPACE>
                ;
        };

#endif // EN_PRONOUN_COMBOS

    };

